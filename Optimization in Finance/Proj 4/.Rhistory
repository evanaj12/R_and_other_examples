# shows the actual revenues from each test of different sold values
matpoints(all_revenues[,1], all_revenues[,2:N], pch=1, col="black")
# shows the maximum revenue, on average
abline(v=43, untf=F, par(lty=2))
abline(h=max(all_revenues_means), untf=F, par(lty=2))
points(x=43, y=max(all_revenues_means), pch=15, col="blue")
# on average, the maximum revenue occurs at 43 tickets sold
max(all_revenues_means)
# shows the mean of all tested revenues
plot(all_revenues_means, type="l", xlab="Tickets Sold", ylab="Revenue", main="Problem 2", ylim=c(0,450), col="red")
# shows the actual revenues from each test of different sold values
matpoints(all_revenues[,1], all_revenues[,2:N], pch=1, col="black")
# shows the maximum revenue, on average
abline(v=43, untf=F, par(lty=2))
abline(h=max(all_revenues_means), untf=F, par(lty=2))
points(x=43, y=max(all_revenues_means), pch=15, col="blue")
# on average, the maximum revenue occurs at 43 tickets sold
max(all_revenues_means)
?plot
?type
?plot
?lines
?sample
N=10000
keep<-rep(NA,N)
swit<-rep(NA,N)
# run 2 sims. Prob of win with staying (keep) and switching (swit)
for (i in 1:N){
#gen rv
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model
# this gives the difference between the entire set of choices and the set of choices the host cannot open.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
pick2<-setdiff(c(1:33),union(pick1,host))
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
warnings()
keep[1]
pick1
pick2
for (i in 1:N){
#gen rv
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model
# this gives the difference between the entire set of choices and the set of choices the host cannot open.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
pick2<-sample(setdiff(c(1:33),union(pick1,host)), 1)
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
prize<-sample(3,N, replace=T)
#alternatively
N=10000
keep<-rep(NA,N)
swit<-rep(NA,N)
prize<-sample(33,N, replace=T)
pick1<-sample(33,N, replace=T)
print(mean(prize==pick1))
print(mean(prize!=pick1))
print(mean(keep))
print(mean(swit))
N=10000
keep<-rep(NA,N)
swit<-rep(NA,N)
# run 2 sims. Prob of win with staying (keep) and switching (swit)
for (i in 1:N){
#gen rv
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model
# this gives the difference between the entire set of choices and the set of choices the host cannot open.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
# this gives the difference between the first selection and those revealed by the host, selecting 1 of those not pick 1 or in host.
pick2<-sample(setdiff(c(1:33),union(pick1,host)), 1)
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
host
prize
plot(keep, swit)
# Homework 5
# Evan Johnston, eaj628
#################################
#Problem 1
# create probability values for p
p<-seq(0,1,0.01)
# create probability function (see report)
prob<-function(p){
return ( 2*p**6 - 6*p**5 + 6*p**4 - 2*p**3 + 3*p**2 - 3*p + 1)
}
# plot the values
plot(p, prob(p), type="l", xlab="Probability Values for P", ylab="Prob. of Series Ending Within 6 Games", main="Problem 1")
points(0.5, prob(0.5), pch=19)
abline(v=0.5, untf=F, par(lty=2))
abline(h=prob(0.5), untf=F, par(lty=2))
# note that if the average probability of winning is 0.5, then the probability of the series ending within 6 games is 0.21875, the minimum of the generated curve.
prob(0.5)
plot(p, prob(p), type="l", xlab="Probability Values for P", ylab="Prob. of Series Ending Within 6 Games", main="Problem 1")
plot(p, prob(p), type="l", xlab="Probability Values for P", ylab="Prob. of Series Ending Within 6 Games", main="Problem 1")
points(0.5, prob(0.5), pch=19)
abline(v=0.5, untf=F, par(lty=2))
abline(h=prob(0.5), untf=F, par(lty=2))
prob(0.5)
# number of trials
N<-1000
# number of tickets sold, 30 to 60.
sold<-seq(30,60,1)
# initialize revenue matrix
all_revenues<-matrix(c(rep(0,(length(sold)*N+length(sold)))), ncol=N+1)
all_revenues[,1]<-sold
# initialize revenue means matrix
all_revenues_means<-matrix(c(rep(0,length(sold)*2)), ncol=2)
all_revenues_means[,1]<-sold
# function to calculate revenue from number of actual passengers
revenue<-function(showed){
if (showed<=40){
return(10*showed)
}
else {
return(40*10-showed%%40*25)
}
}
# loops for each number of tickets sold
for (i in 1:length(sold)){
# random distribution of N trials with 0.9 probability of sold[i] number of customers actually riding the bus.
showed<-rbinom(N,sold[i],0.9)
# initialize revenues vector for this sold[i]
revenues<-c(rep(0,N))
# keeps revenue values
for (j in 1:length(showed)){
rev<-revenue(showed[j])
revenues[j]<-rev
}
# stores this iteration of sold[i] in revenue matricies
all_revenues[i,2:(N+1)]<-revenues
all_revenues_means[i,2]<-mean(revenues)
}
# shows the mean of all tested revenues
plot(all_revenues_means, type="l", xlab="Tickets Sold", ylab="Revenue", main="Problem 2", ylim=c(0,450), col="red")
# shows the actual revenues from each test of different sold values
matpoints(all_revenues[,1], all_revenues[,2:N], pch=1, col="black")
# shows the maximum revenue, on average
abline(v=43, untf=F, par(lty=2))
abline(h=max(all_revenues_means), untf=F, par(lty=2))
points(x=43, y=max(all_revenues_means), pch=15, col="blue")
# on average, the maximum revenue occurs at 43 tickets sold
max(all_revenues_means)
plot(all_revenues_means, type="l", xlab="Tickets Sold", ylab="Revenue", main="Problem 2", ylim=c(0,450), col="red")
plot(all_revenues_means, type="l", xlab="Tickets Sold", ylab="Revenue", main="Problem 2", ylim=c(0,450), col="red")
# shows the actual revenues from each test of different sold values
matpoints(all_revenues[,1], all_revenues[,2:N], pch=1, col="black")
# shows the maximum revenue, on average
abline(v=43, untf=F, par(lty=2))
abline(h=max(all_revenues_means), untf=F, par(lty=2))
points(x=43, y=max(all_revenues_means), pch=15, col="blue")
max(all_revenues_means)
# number of trials
N=10000
# initialize keep and switch vectors
# run 2 sims. Prob of win with staying (keep) and switching (swit)
keep<-rep(NA,N)
swit<-rep(NA,N)
for (i in 1:N){
#gen rv's: the prize door and the first pick
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model:
# this gives the difference between the entire set of choices and the set of choices the host cannot open. The host opens 5 doors.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
# this gives the difference between the first selection and those revealed by the host, selecting 1 of those not pick 1 or in host.
pick2<-sample(setdiff(c(1:33),union(pick1,host)), 1)
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
# number of trials
N=10000
# initialize keep and switch vectors
# run 2 sims. Prob of win with staying (keep) and switching (swit)
keep<-rep(NA,N)
swit<-rep(NA,N)
for (i in 1:N){
#gen rv's: the prize door and the first pick
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model:
# this gives the difference between the entire set of choices and the set of choices the host cannot open. The host opens 5 doors.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
# this gives the difference between the first selection and those revealed by the host, selecting 1 of those not pick 1 or in host.
pick2<-sample(setdiff(c(1:33),union(pick1,host)), 1)
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
# number of trials
N=10000
# initialize keep and switch vectors
# run 2 sims. Prob of win with staying (keep) and switching (swit)
keep<-rep(NA,N)
swit<-rep(NA,N)
for (i in 1:N){
#gen rv's: the prize door and the first pick
prize<-sample(33,1)
pick1<-sample(33,1)
#sim model:
# this gives the difference between the entire set of choices and the set of choices the host cannot open. The host opens 5 doors.
host<-sample(setdiff(c(1:33),union(prize,pick1)), 5)
# this gives the difference between the first selection and those revealed by the host, selecting 1 of those not pick 1 or in host.
pick2<-sample(setdiff(c(1:33),union(pick1,host)), 1)
#keep track
keep[i]<-(pick1==prize)
swit[i]<-(pick2==prize)
}
print(mean(keep))
print(mean(swit))
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Code/simStk1.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Code/simStk1.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Code/simStk1.R', echo=TRUE)
matplot(simulatedPrices)
plot(simulatedPrices)
View(simulatedPrices)
plot(rowmeans(simulatedPrices))
?rowmeans
?rowMeans
plot(rowMeans(simulatedPrices))
plot(colMeans(simulatedPrices))
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
callPricer(p0,K,T,r,sigma,N)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('/project4.2_g8.R', echo=TRUE)
sigma<-seq(0.05,0.6,0.05)
sigma
callPricer(p0,K,T,r,sigma,N)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
prices
sigma
#Project 4.3 - Exotic Option Pricing
#Group 8:
#Evan Johnston
#Chinmay Baxi
#Roberto Toto
#3 - Estimate Volitility
#source('/project4.2_g8.R', echo=TRUE)
callPricer<-function(p0,K,T,r,sigma,N){
mu_int<-r/252
sigma_int<-sigma*sqrt(dt)
optionPayOffs<-vector()
for(i in 1:N){
returns<-rnorm(T,mu_int,sigma_int)
prices<-p0*cumprod(returns+1)
optionPayOffs[i]<-max(prices[T]-K,0)
}
optPrice<-mean(optionPayOffs)/(1+r)^maturity
return(optPrice)
}
# inital stock price
p0<-104.04
# maturity date (June 17 - 153 days)
maturity<-153/252
# create period
dt<-1/252
T<-maturity/dt
# call option price
c<-10.35
# strike price
K<-105
# modified risk free rate
r<-0
# vector of potential variations
sigma<-seq(0.05,0.6,0.01)
# number of simulations
N<-10000
# initalize prices vector
prices<-rep(0,length(sigma))
for (i in 1:length(sigma)){
prices[i]<-callPricer(p0,K,T,r,sigma[i],N)
}
plot(sigma, prices)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.4_g8.R', echo=TRUE)
exoticCallPricer(p0,K,T,r,sigma[i],N)
exoticCallPricer(p0,K,T,r,sigma,N)
exoticCallPricer(p0,K,T,r,sigma,N)
exoticCallPricer(p0,K,T,r,sigma,N)
exoticCallPricer(p0,K,T,r,sigma,N)
source(/project4.2_g8.R)
source(project4.2_g8.R)
pwd
source(project4.2_g8.R)
pwd
wd
setwd("~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4")
source(project4.2_g8.R)
source('project4.2_g8.R')
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
plot(sigma, prices)
?points
prices
?lines
?abline
plot(sigma, prices)
abline(h=10.35)
require("ggplot2")
data.frame(sigma, prices)
ggplot(df1)
df1<-data.frame(sigma, prices)
ggplot(df1)
ggplot(df1, aes(x=sigma))
df1<-data.frame(sigma, prices)
plot1<-ggplot(df1, aes(x=sigma))
plot1
plot1<-ggplot(df1, aes(x=sigma, y=prices))
plot1
?ggplot
ggplot(df1)
df1
ggplot(df1, aes(x=sigma))
plot1<-ggplot(df1, aes(x=sigma, y=prices)) + geom_point()
plot1
View(df1)
df1<-data.frame(sigma, prices)
plot(sigma, prices)
View(df1)
length(df1)
dim(df1)
df1<-data.frame(sigma, prices)
plot(sigma, prices)
for (i in 1:dim(df1)[1]){
if (df1$price>10 & df1$price<11){
print(df1[i,])
}
}
warnings()
for (i in 1:dim(df1)[1]){
if ((df1$price>10) & (df1$price<11)){
print(df1[i,])
}
}
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
}
}
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
}
}
for (i in 1:length(sigma)){
prices[i]<-callPricer(p0,K,T,r,sigma[i],N)
}
# create data frame of variations and respective prices
df1<-data.frame(sigma, prices)
# iterates through the dataframe and only shows prices/volatilities in the $10 range
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
}
}
View(df1)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
?points
plot(sigma, prices)
points(x=df1$sigma[28], y=df1$prices[28], col="blue")
points(x=df1$sigma[29], y=df1$prices[29], col="blue")
points(x=df1$sigma[30], y=df1$prices[30], col="blue")
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
}
}
?append
?type
?points
?pch
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
?append
targets<-vector()
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
append(targets,i,after=length(targets))
}
}
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
append(targets,c(i),after=length(targets))
}
}
targets
targets<-vector()
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
append(targets,50,after=length(targets))
}
}
?append
append(1:5, 0:1, after = 3)
?.append
targets<-vector()
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
targets<-append(targets, 50,after=length(targets))
}
}
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
targets<-append(targets,i,after=length(targets))
}
}
targets<-vector()
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
targets<-append(targets,i,after=length(targets))
}
}
plot(sigma, prices)
for (i in 1:length(targets)){
points(x=df1$sigma[targets[i]], y=df1$prices[targets[i]], pch=16, col="blue")
}
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.4_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
plot(prices)
lines(y=mean(prices))
abline(h=mean(prices))
abline(h=mean(prices),col=blue)
?abline
abline(h=mean(prices),col="blue")
?regress
?correlation
?lowess
lines(lowess(prices),col="red")
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.4_g8.R', echo=TRUE)
?plot
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.2_g8.R', echo=TRUE)
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.3_g8.R', echo=TRUE)
# fill price vector with prices based on different variations
for (i in 1:length(sigma)){
prices[i]<-callPricer(p0,K,T,r,sigma[i],N)
}
# create data frame of variations and respective prices
df1<-data.frame(sigma, prices)
# iterates through the dataframe and only shows prices/volatilities in the $10 range, that is those close to our price of $10.35.
targets<-vector()
for (i in 1:dim(df1)[1]){
if ((df1$price[i]>10) & (df1$price[i]<11)){
print(df1[i,])
targets<-append(targets,i,after=length(targets))
}
}
# plots this relationship with the closest values in blue
plot(sigma, prices, main="Volatility vs. Price")
for (i in 1:length(targets)){
points(x=df1$sigma[targets[i]], y=df1$prices[targets[i]], pch=16, col="blue")
}
source('~/Desktop/UT 2015-2016/Sem 1/Optimization Methods in Finance STA 372/Projects/Proj 4/project4.4_g8.R', echo=TRUE)
